/*
 * Disable preflight styles:
 * https://tailwindcss.com/docs/preflight#disabling-preflight
 */
@layer theme, base, components, utilities;

@import 'tailwindcss/theme.css' layer(theme) prefix(tp);
@import 'tailwindcss/utilities.css' layer(utilities) prefix(tp);

@import '../../../css/themes.css' layer(base);

@config "./tailwind.config.js";

@utility container {
  position: absolute;
  left: var(--left, auto);
  top: var(--top, auto);

  /*
    * Use the empirical maximum z-index since some sites (e.g. TimeTree) use this
    * for their popups.
    */
  z-index: 2147483647;

  /* Make sure the drop shadow on the window doesn't get cut off */
  padding-right: 4px;
  padding-bottom: 4px;

  overflow-y: visible;
  pointer-events: all;

  &:not(.interactive) {
    pointer-events: none;
  }

  /*
  * Variation on the interactive container when it is not yet actually
  * interactive.
  */
  &.interactive.ghost {
    pointer-events: none;
  }

  &.interactive.ghost .window {
    border-style: dashed;
  }

  &.hidden {
    display: none;
  }

  .-inline > & {
    position: revert;
    z-index: revert;
    pointer-events: revert;
  }

  /*
  * When the popup is interactive we make the window scrollable, but for
  * non-interactive cases we just fade it out.
  *
  * To make the window scrollable we need to set the max-height on the
  * window itself.
  *
  * For the fade-effect, however, we set the max-height and fade effect
  * on the container so that the mask doesn't end up clipping the drop shadow
  * on the popup.
  */
  &.interactive .window {
    max-height: var(--max-height, none);
  }

  &:not(.interactive) {
    max-height: var(--max-height, none);
    -webkit-mask-image: linear-gradient(
      to bottom,
      black calc(var(--max-height) - 5px),
      transparent
    );
    mask-image: linear-gradient(
      to bottom,
      black calc(var(--max-height) - 5px),
      transparent
    );
  }

  & .window {
    min-height: var(--min-height, none);
  }

  &:not(.hidden) .window {
    display: flex;
    flex-direction: column;
  }

  &.interactive .content {
    overflow: auto;
    overscroll-behavior: contain;
  }

  /* Make the tabs bigger in interactive mode so they are easier to click */
  &.interactive .tabs .tab {
    font-size: var(--base-font-size);
  }

  &.interactive .tabs .tab button {
    padding: 0.7em 18px;
  }

  &.interactive .tabs .tab button .icon {
    width: 14px;
    height: 14px;
  }

  &:not(.interactive) .settings {
    display: none;
  }

  &:not(.interactive) .pin {
    display: none;
  }

  &:not(.interactive) .close {
    display: none;
  }

  &.pinned .pin-button svg path {
    fill: currentColor;
  }

  /* Tab bar on the side */

  &:not(.hidden) .window[data-tab-side='left'] {
    display: flex;
    flex-direction: row;
  }

  &:not(.hidden) .window[data-tab-side='right'] {
    display: flex;
    flex-direction: row;
  }

  & .window[data-tab-side='left'] .tab-bar {
    flex-direction: column;
    overflow: visible;
  }

  & .window[data-tab-side='right'] .tab-bar {
    flex-direction: column;
    overflow: visible;
  }

  & .window[data-tab-side='right'] .tab-bar {
    order: 1;
  }

  & .window[data-tab-side='left'] .tab-bar .tabs {
    display: flex;
    flex-direction: column;
  }

  & .window[data-tab-side='right'] .tab-bar .tabs {
    display: flex;
    flex-direction: column;
  }

  & .window[data-tab-side='left'] .tab-bar .settings {
    margin-bottom: 0.5em;
  }

  & .window[data-tab-side='right'] .tab-bar .settings {
    margin-bottom: 0.5em;
  }

  & .window[data-tab-side='top'] .tab-bar .close {
    margin-left: 1em;
  }

  & .window[data-tab-side='left'] .tab-bar .close {
    order: -1;
    margin-top: 0.5em;
    margin-bottom: 1em;
  }

  & .window[data-tab-side='right'] .tab-bar .close {
    order: -1;
    margin-top: 0.5em;
    margin-bottom: 1em;
  }

  & .window[data-tab-side='left'] .tabs .tab {
    flex-grow: 0;
  }

  & .window[data-tab-side='right'] .tabs .tab {
    flex-grow: 0;
  }

  & .window[data-tab-side='left'] .tabs .tab button {
    padding: 0.7em;
  }

  & .window[data-tab-side='right'] .tabs .tab button {
    padding: 0.7em;
  }

  & .window[data-tab-side='left'] .tabs .tab button svg {
    margin: 0;
  }

  & .window[data-tab-side='right'] .tabs .tab button svg {
    margin: 0;
  }

  & .window[data-tab-side='left'] .tabs .tab button span {
    display: none;
  }

  & .window[data-tab-side='right'] .tabs .tab button span {
    display: none;
  }

  &.interactive .w-kanji .wk-level {
    text-decoration: underline dotted;
  }

  &.interactive .w-kanji .wk-level::before {
    text-decoration: underline dotted;
  }

  @media (hover) {
    &.interactive .w-kanji .wk-level:hover {
      background: color(from var(--selected-highlight) srgb r g b / 0.1);
    }

    &.interactive .entry:hover .w-kanji .wk-level {
      color: var(--selected-highlight);
      border-color: var(--selected-highlight);
    }
  }

  @media (hover) {
    &.interactive .entry:not(:hover) {
      transition: background-color 0.08s ease-out;
    }
    &.interactive .entry:hover {
      color: var(--selected-highlight);
      background: var(--hover-bg);
      border-radius: 2px;
      cursor: pointer;
    }
    &.interactive .entry.-selected:hover {
      background: var(--selected-bg);
    }
  }

  @media (hover) {
    &.interactive .entry:hover .w-def .tag {
      color: var(--selected-tag-color);
      border-color: var(--selected-tag-border) !important;
    }
  }

  @media (hover) {
    &.interactive .entry:hover .w-kanji {
      color: var(--selected-highlight);
    }
  }

  @media (hover) {
    &.interactive .entry:hover .w-kana {
      color: var(--selected-reading-highlight);
    }
    &.interactive .entry:hover .w-romaji {
      color: var(--selected-reading-highlight);
    }
  }

  @media (hover) {
    &.interactive .entry:hover .w-def {
      color: var(--selected-def-color);
    }
    &.interactive .entry:hover .w-def * {
      color: var(--selected-def-color);
    }
  }

  @media (hover) {
    &.interactive .entry:hover .w-conj {
      color: var(--selected-conj-color);
    }
  }
}

@utility interactive {
  /*
  * Variation on the interactive container when it is not yet actually
  * interactive.
  */
  &.container.ghost {
    pointer-events: none;
  }

  &.container.ghost .window {
    border-style: dashed;
  }

  /*
  * When the popup is interactive we make the window scrollable, but for
  * non-interactive cases we just fade it out.
  *
  * To make the window scrollable we need to set the max-height on the
  * window itself.
  *
  * For the fade-effect, however, we set the max-height and fade effect
  * on the container so that the mask doesn't end up clipping the drop shadow
  * on the popup.
  */
  &.container .window {
    max-height: var(--max-height, none);
  }

  &.container .content {
    overflow: auto;
    overscroll-behavior: contain;
  }

  /* Make the tabs bigger in interactive mode so they are easier to click */
  &.container .tabs .tab {
    font-size: var(--base-font-size);
  }

  &.container .tabs .tab button {
    padding: 0.7em 18px;
  }

  &.container .tabs .tab button .icon {
    width: 14px;
    height: 14px;
  }

  &.container .w-kanji .wk-level {
    text-decoration: underline dotted;
  }

  & .container .w-kanji .wk-level::before {
    text-decoration: underline dotted;
  }

  @media (hover) {
    &.container .w-kanji .wk-level:hover {
      background: color(from var(--selected-highlight) srgb r g b / 0.1);
    }

    &.container .entry:hover .w-kanji .wk-level {
      color: var(--selected-highlight);
      border-color: var(--selected-highlight);
    }
  }

  @media (hover) {
    &.container .entry:not(:hover) {
      transition: background-color 0.08s ease-out;
    }
    &.container .entry:hover {
      color: var(--selected-highlight);
      background: var(--hover-bg);
      border-radius: 2px;
      cursor: pointer;
    }
    &.container .entry.-selected:hover {
      background: var(--selected-bg);
    }
  }

  @media (hover) {
    &.container .entry:hover .w-def .tag {
      color: var(--selected-tag-color);
      border-color: var(--selected-tag-border) !important;
    }
  }

  @media (hover) {
    &.container .entry:hover .w-kanji {
      color: var(--selected-highlight);
    }
  }

  @media (hover) {
    &.container .entry:hover .w-kana {
      color: var(--selected-reading-highlight);
    }
    & .container .entry:hover .w-romaji {
      color: var(--selected-reading-highlight);
    }
  }

  @media (hover) {
    &.container .entry:hover .w-def {
      color: var(--selected-def-color);
    }
    & .container .entry:hover .w-def * {
      color: var(--selected-def-color);
    }
  }

  @media (hover) {
    &.container .entry:hover .w-conj {
      color: var(--selected-conj-color);
    }
  }
}

@utility ghost {
  /*
  * Variation on the interactive container when it is not yet actually
  * interactive.
  */
  &.container.interactive {
    pointer-events: none;
  }

  &.container.interactive .window {
    border-style: dashed;
  }
}

@utility window {
  .container.interactive.ghost & {
    border-style: dashed;
  }

  /*
  * When the popup is interactive we make the window scrollable, but for
  * non-interactive cases we just fade it out.
  *
  * To make the window scrollable we need to set the max-height on the
  * window itself.
  *
  * For the fade-effect, however, we set the max-height and fade effect
  * on the container so that the mask doesn't end up clipping the drop shadow
  * on the popup.
  */
  .container.interactive & {
    max-height: var(--max-height, none);
  }

  .container & {
    min-height: var(--min-height, none);
  }
  max-width: var(--max-width, 600px);
  max-width: var(--max-width, min(600px, calc(100vw - 30px)));

  contain: content;
  border-radius: 5px;
  box-shadow:
    0px 0.5px 0.5px rgba(100, 100, 100, 0.15),
    1px 2px 1px rgba(100, 100, 100, 0.15),
    2px 4px 8px rgba(100, 100, 100, 0.15);
  font: normal 14px;

  color: var(--text-color);
  background: var(--bg-color);
  border: 1px solid var(--border-color);

  font-family: Meiryo, sans-serif;

  &.bundled-fonts {
    font-family: '10ten Inter', '10ten Noto Sans JP', sans-serif;
    font-feature-settings:
      'calt', 'case', 'cv01', 'cv03', 'cv04', 'cv11', 'ss03';
    font-weight: 380;
  }

  /* When the tabs are shown on top, make the window have a consistent width
    so the tabs don't jump around. */
  &[data-tab-side='top'] {
    display: flex;
    max-width: none;
    /* Fallback for the below */
    width: 500px;
    /* The 30px here is to accommodate scrollbars on Windows plus a bit of
      padding. */
    width: min(500px, calc(100vw - 30px));
  }

  .container:not(.hidden) & {
    display: flex;
    flex-direction: column;
  }

  @supports (scrollbar-width: thin) {
    & .content {
      scrollbar-width: thin;
      scrollbar-color: var(--scrollbar-fg) var(--scrollbar-bg);
    }
  }

  @supports not (scrollbar-width: thin) {
    & .content::-webkit-scrollbar {
      width: 7px;
      background-color: var(--scrollbar-bg);
    }

    & .content::-webkit-scrollbar-thumb {
      background-color: var(--scrollbar-fg);
    }
  }

  & .status-bar-wrapper {
    flex-grow: 1;

    display: flex;
    flex-direction: column;
    overflow: hidden;
  }

  & .status-bar-wrapper > :first-child {
    flex-grow: 1;
  }

  & .status-bar-wrapper > .status-bar {
    flex-shrink: 0;
  }

  & .content {
    flex-grow: 1;
    display: flex;
    flex-direction: column;
  }

  & .content > :first-child {
    flex-grow: 1;
  }
  font-size: var(--base-font-size);

  &.font-large {
    --base-font-size: var(--large-font-size);
  }

  &.font-xl {
    --base-font-size: var(--xl-font-size);
  }

  /* Don't increase the tab font size too much or else it looks childish */
  &.font-large .tabs .tab {
    font-size: calc(var(--base-font-size) * 0.8);
  }
  &.font-xl .tabs .tab {
    font-size: calc(var(--base-font-size) * 0.8);
  }

  @media (max-width: 400px) {
    &[data-tab-side='top'] .tabs .tab button span:lang(en) {
      font-size: calc(var(--base-font-size) * 0.7);
    }
  }

  @media (max-width: 350px) {
    &[data-tab-side='top'] .tabs .tab {
      flex-grow: 0;
    }
    &[data-tab-side='top'] .tabs .tab button span {
      display: none;
    }
    &[data-tab-side='top'] .tabs .tab button .icon {
      margin-right: 0px;
    }
  }

  & .close-button-wrapper {
    flex-grow: 1;

    display: flex;
    overflow: auto;
  }

  & .close-button-wrapper .close {
    z-index: 1;
    flex: 0 0 auto;
    margin: 4px;
    /* Drop margin since the meta element should have sufficient padding */
    margin-left: 0px;
  }

  /* Tab bar on the side */

  .container:not(.hidden) &[data-tab-side='left'] {
    display: flex;
    flex-direction: row;
  }

  .container:not(.hidden) &[data-tab-side='right'] {
    display: flex;
    flex-direction: row;
  }

  .container &[data-tab-side='left'] .tab-bar {
    flex-direction: column;
    overflow: visible;
  }

  .container &[data-tab-side='right'] .tab-bar {
    flex-direction: column;
    overflow: visible;
  }

  .container &[data-tab-side='right'] .tab-bar {
    order: 1;
  }

  .container &[data-tab-side='left'] .tab-bar .tabs {
    display: flex;
    flex-direction: column;
  }

  .container &[data-tab-side='right'] .tab-bar .tabs {
    display: flex;
    flex-direction: column;
  }

  .container &[data-tab-side='left'] .tab-bar .settings {
    margin-bottom: 0.5em;
  }

  .container &[data-tab-side='right'] .tab-bar .settings {
    margin-bottom: 0.5em;
  }

  .container &[data-tab-side='top'] .tab-bar .close {
    margin-left: 1em;
  }

  .container &[data-tab-side='left'] .tab-bar .close {
    order: -1;
    margin-top: 0.5em;
    margin-bottom: 1em;
  }

  .container &[data-tab-side='right'] .tab-bar .close {
    order: -1;
    margin-top: 0.5em;
    margin-bottom: 1em;
  }

  .container &[data-tab-side='left'] .tabs .tab {
    flex-grow: 0;
  }

  .container &[data-tab-side='right'] .tabs .tab {
    flex-grow: 0;
  }

  .container &[data-tab-side='left'] .tabs .tab button {
    padding: 0.7em;
  }

  .container &[data-tab-side='right'] .tabs .tab button {
    padding: 0.7em;
  }

  .container &[data-tab-side='left'] .tabs .tab button svg {
    margin: 0;
  }

  .container &[data-tab-side='right'] .tabs .tab button svg {
    margin: 0;
  }

  .container &[data-tab-side='left'] .tabs .tab button span {
    display: none;
  }

  .container &[data-tab-side='right'] .tabs .tab button span {
    display: none;
  }

  /* Expandable container */

  & .content .expandable {
    overflow: auto;
    overscroll-behavior: contain;
    scrollbar-gutter: stable;
  }

  @supports (scrollbar-width: thin) {
    & .content .expandable {
      scrollbar-width: thin;
      scrollbar-color: var(--scrollbar-fg) var(--scrollbar-bg);
    }
  }

  @supports not (scrollbar-width: thin) {
    & .content .expandable::-webkit-scrollbar {
      width: 7px;
      background-color: var(--scrollbar-bg);
    }

    & .content .expandable::-webkit-scrollbar-thumb {
      background-color: var(--scrollbar-fg);
    }
  }

  & .content .expandable .fold-point {
    display: contents;
  }

  /* Expand button */

  & .content .expand-button {
    /* Box layout */
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    padding: 8px;

    /* Positioning */
    position: sticky;
    bottom: 0;

    /* Reset button styles */
    appearance: none;
    border: 0;
    margin: 0;
    cursor: pointer;
    font: inherit;
    line-height: 1;
    text-decoration: none;

    /* Colors */
    background: linear-gradient(
      to bottom,
      rgba(var(--bg-rgb), 0.3),
      var(--bg-color) 80%
    );
    color: rgba(var(--expand-button-rgb), 0.8);
  }

  & .content {
    /* Extra space to add to the end of the content so the expand button doesn't
    * overlap with the last entry. */
    --expand-button-allowance: 35px;
  }

  & .content .expand-button:hover {
    color: var(--expand-button-color);
    /* Use outline instead of border so it doesn't affect the layout (even if we
    * try to reserve space for the border using a transparent border it will not
    * blend with the underlying element since you can't have a fully transparent
    * border on a non-transparent background. */
    outline: 1px var(--expand-button-color) dotted;
    background: linear-gradient(
      to bottom,
      rgba(var(--bg-rgb), 0.8),
      var(--bg-color) 80%
    );
  }

  & .content .expand-button .icon {
    width: 16px;
    height: 16px;
    flex-grow: 1;
  }

  & .content .expand-button kbd {
    color: var(--expand-button-color);
    font-family: monospace;
    font-weight: 800;
    padding: 0.1rem 0.2rem;
    border-radius: 0.2rem;
    background: rgba(255, 255, 255, 0.1);
    border: 1px solid var(--expand-button-color) !important;
  }

  &.font-large .wordlist {
    gap: 12px;
  }

  &.font-xl .wordlist {
    gap: 16px;
  }

  & .entry.-selected .w-kanji .wk-level {
    border-color: var(--selected-highlight);
  }

  &:not(.-has-overlay) .entry.-selected {
    color: var(--selected-highlight);
    background: var(--selected-bg);
    border-radius: 2px;
  }

  & .entry.-selected .w-def .tag {
    color: var(--selected-tag-color);
    border-color: var(--selected-tag-border) !important;
  }

  & .entry.-selected .w-kanji {
    color: var(--selected-highlight);
  }

  & .entry.-selected .w-kana {
    color: var(--selected-reading-highlight);
  }

  & .entry.-selected .w-romaji {
    color: var(--selected-reading-highlight);
  }

  & .entry.-selected .w-def {
    color: var(--selected-def-color);
  }

  & .entry.-selected .w-def * {
    color: var(--selected-def-color);
  }

  & .entry.-selected .w-conj {
    color: var(--selected-conj-color);
  }

  & .entry.-flash {
    animation: tenten-ja-flash 0.5s;
  }

  &.font-xl .status-bar {
    font-size: calc(0.8 * var(--base-font-size));
  }

  &.-copy-finished .status-bar > .keys {
    animation: fade-out 0.4s linear forwards;
  }

  &.-copy-error .status-bar > .keys {
    animation: fade-out 0.4s linear forwards;
  }

  &.-copy-finished .status-bar > .status {
    opacity: 0;
    animation:
      fade-in 0.4s linear forwards,
      fade-out 0.3s 0.9s forwards;
  }

  &.-copy-finished .status-bar {
    animation: roll-up 0.3s 1s forwards;
  }

  &.-copy-error .status-bar > .status {
    opacity: 0;
    animation: fade-in 0.4s linear forwards;
    background: rgba(255, 204, 204, 0.8);
    color: #b43e3e;
  }

  /* Blurring for the entry area when the copy overlay is showing */
  &.-has-overlay .content .grid-stack > :first-child {
    pointer-events: none;
    filter: blur(20px);
    transition: filter 0.3s ease-in-out;
  }

  &.-has-overlay .content .grid-stack > .copy-overlay {
    background: hsla(0, 0%, 97%, 0.6);
    transition: background-color 0.3s ease-in-out;
  }

  /* If the overlay is showing, don't constrain the window height since it might
  * mean that the buttons on the overlay get cut off. */
  &.-has-overlay {
    max-height: none;
  }

  /* Let the size of the overlay determine the overall size of the popup contents.
  *
  * This prevents the window from suddenly getting very large when we drop the
  * max-height definition above.
  *
  * Ideally we'd only do this if we were actually going to constrain the height
  * anyway, but that's hard to detect so we just do this unconditionally and so
  * far it seems to work ok. */
  &.-has-overlay .content .grid-stack > .entry-data {
    position: absolute;
    width: 100%;
  }
}

@utility hidden {
  &.container {
    display: none;
  }
}

@utility -inline {
  & > .container {
    position: revert;
    z-index: revert;
    pointer-events: revert;
  }
}

@utility bundled-fonts {
  &.window {
    font-family: '10ten Inter', '10ten Noto Sans JP', sans-serif;
    font-feature-settings:
      'calt', 'case', 'cv01', 'cv03', 'cv04', 'cv11', 'ss03';
    font-weight: 380;
  }
}

@utility content {
  .container.interactive & {
    overflow: auto;
    overscroll-behavior: contain;
  }

  @supports (scrollbar-width: thin) {
    .window & {
      scrollbar-width: thin;
      scrollbar-color: var(--scrollbar-fg) var(--scrollbar-bg);
    }
  }

  @supports not (scrollbar-width: thin) {
    .window &::-webkit-scrollbar {
      width: 7px;
      background-color: var(--scrollbar-bg);
    }

    .window &::-webkit-scrollbar-thumb {
      background-color: var(--scrollbar-fg);
    }
  }

  .window & {
    flex-grow: 1;
    display: flex;
    flex-direction: column;
  }

  .window & > :first-child {
    flex-grow: 1;
  }

  /* Expandable container */

  .window & .expandable {
    overflow: auto;
    overscroll-behavior: contain;
    scrollbar-gutter: stable;
  }

  @supports (scrollbar-width: thin) {
    .window & .expandable {
      scrollbar-width: thin;
      scrollbar-color: var(--scrollbar-fg) var(--scrollbar-bg);
    }
  }

  @supports not (scrollbar-width: thin) {
    .window & .expandable::-webkit-scrollbar {
      width: 7px;
      background-color: var(--scrollbar-bg);
    }

    .window & .expandable::-webkit-scrollbar-thumb {
      background-color: var(--scrollbar-fg);
    }
  }

  .window & .expandable .fold-point {
    display: contents;
  }

  /* Expand button */

  .window & .expand-button {
    /* Box layout */
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    padding: 8px;

    /* Positioning */
    position: sticky;
    bottom: 0;

    /* Reset button styles */
    appearance: none;
    border: 0;
    margin: 0;
    cursor: pointer;
    font: inherit;
    line-height: 1;
    text-decoration: none;

    /* Colors */
    background: linear-gradient(
      to bottom,
      rgba(var(--bg-rgb), 0.3),
      var(--bg-color) 80%
    );
    color: rgba(var(--expand-button-rgb), 0.8);
  }

  .window & {
    /* Extra space to add to the end of the content so the expand button doesn't
    * overlap with the last entry. */
    --expand-button-allowance: 35px;
  }

  .window & .expand-button:hover {
    color: var(--expand-button-color);
    /* Use outline instead of border so it doesn't affect the layout (even if we
    * try to reserve space for the border using a transparent border it will not
    * blend with the underlying element since you can't have a fully transparent
    * border on a non-transparent background. */
    outline: 1px var(--expand-button-color) dotted;
    background: linear-gradient(
      to bottom,
      rgba(var(--bg-rgb), 0.8),
      var(--bg-color) 80%
    );
  }

  .window & .expand-button .icon {
    width: 16px;
    height: 16px;
    flex-grow: 1;
  }

  .window & .expand-button kbd {
    color: var(--expand-button-color);
    font-family: monospace;
    font-weight: 800;
    padding: 0.1rem 0.2rem;
    border-radius: 0.2rem;
    background: rgba(255, 255, 255, 0.1);
    border: 1px solid var(--expand-button-color) !important;
  }

  /* Blurring for the entry area when the copy overlay is showing */
  .window.-has-overlay & .grid-stack > :first-child {
    pointer-events: none;
    filter: blur(20px);
    transition: filter 0.3s ease-in-out;
  }

  .window.-has-overlay & .grid-stack > .copy-overlay {
    background: hsla(0, 0%, 97%, 0.6);
    transition: background-color 0.3s ease-in-out;
  }

  /* Let the size of the overlay determine the overall size of the popup contents.
  *
  * This prevents the window from suddenly getting very large when we drop the
  * max-height definition above.
  *
  * Ideally we'd only do this if we were actually going to constrain the height
  * anyway, but that's hard to detect so we just do this unconditionally and so
  * far it seems to work ok. */
  .window.-has-overlay & .grid-stack > .entry-data {
    position: absolute;
    width: 100%;
  }
}

@utility status-bar-wrapper {
  .window & {
    flex-grow: 1;

    display: flex;
    flex-direction: column;
    overflow: hidden;
  }

  .window & > :first-child {
    flex-grow: 1;
  }

  .window & > .status-bar {
    flex-shrink: 0;
  }
}

@utility status-bar {
  .window .status-bar-wrapper > & {
    flex-shrink: 0;
  }

  /*
   * Status bar
   */
  position: relative;
  width: 100%;
  background: var(--status-bg);
  max-height: calc(4 * var(--base-font-size));

  .window.font-xl & {
    font-size: calc(0.8 * var(--base-font-size));
  }

  & > .status {
    display: flex;
    align-items: baseline;
  }

  & > * {
    padding: 5px 8px 5px;
  }

  &.-subdued {
    opacity: 0.7;
  }

  & kbd {
    color: rgb(10, 10, 10);
    font-size: 0.8em;
    font-family: monospace;
    height: 1.2rem;
    padding: 0.2rem;
    border-radius: 0.2rem;
    background: white;
    border: 1px solid #909090 !important;
  }

  & .spinner {
    display: inline-block;
    width: 12px;
    height: 12px;
    margin-right: 7px;
    fill: currentcolor;
    animation: spin-ccw 0.8s linear infinite;
  }

  .window.-copy-finished & > .keys {
    animation: fade-out 0.4s linear forwards;
  }

  .window.-copy-error & > .keys {
    animation: fade-out 0.4s linear forwards;
  }

  .window.-copy-finished & > .status {
    opacity: 0;
    animation:
      fade-in 0.4s linear forwards,
      fade-out 0.3s 0.9s forwards;
  }

  .window.-copy-finished & {
    animation: roll-up 0.3s 1s forwards;
  }

  .window.-copy-error & > .status {
    opacity: 0;
    animation: fade-in 0.4s linear forwards;
    background: rgba(255, 204, 204, 0.8);
    color: #b43e3e;
  }
}

@utility font-large {
  &.window {
    --base-font-size: var(--large-font-size);
  }

  /* Don't increase the tab font size too much or else it looks childish */
  &.window .tabs .tab {
    font-size: calc(var(--base-font-size) * 0.8);
  }

  &.window .wordlist {
    gap: 12px;
  }
}

@utility font-xl {
  &.window {
    --base-font-size: var(--xl-font-size);
  }
  & .window .tabs .tab {
    font-size: calc(var(--base-font-size) * 0.8);
  }

  &.window .wordlist {
    gap: 16px;
  }

  &.window .status-bar {
    font-size: calc(0.8 * var(--base-font-size));
  }
}

@utility tab-bar {
  /* Tab bar */
  flex-shrink: 0;

  display: flex;
  padding: 0;
  margin: 0;
  /* Safari appears to need the following */
  overflow: hidden;

  background: var(--cell-highlight-bg);
  color: var(--cell-highlight-fg);

  /* Make sure we are above the content area. This is mostly needed when we are
    * showing the copy overlay since the entry data might overflow its region in
    * that case. */
  z-index: 1;

  & .settings {
    flex-shrink: 0;
    align-self: center;
    margin: 2px;
  }

  & .pin {
    flex-shrink: 0;
    align-self: center;
    margin: 2px;
  }

  & .close {
    flex-shrink: 0;
    align-self: center;
    margin: 2px;
  }

  .container .window[data-tab-side='left'] & {
    flex-direction: column;
    overflow: visible;
  }

  .container .window[data-tab-side='right'] & {
    flex-direction: column;
    overflow: visible;
  }

  .container .window[data-tab-side='right'] & {
    order: 1;
  }

  .container .window[data-tab-side='left'] & .tabs {
    display: flex;
    flex-direction: column;
  }

  .container .window[data-tab-side='right'] & .tabs {
    display: flex;
    flex-direction: column;
  }

  .container .window[data-tab-side='left'] & .settings {
    margin-bottom: 0.5em;
  }

  .container .window[data-tab-side='right'] & .settings {
    margin-bottom: 0.5em;
  }

  .container .window[data-tab-side='top'] & .close {
    margin-left: 1em;
  }

  .container .window[data-tab-side='left'] & .close {
    order: -1;
    margin-top: 0.5em;
    margin-bottom: 1em;
  }

  .container .window[data-tab-side='right'] & .close {
    order: -1;
    margin-top: 0.5em;
    margin-bottom: 1em;
  }
}

@utility tabs {
  flex-grow: 1;
  display: flex;
  padding: 0;
  margin: 0;

  & .tab {
    flex-grow: 1;
    list-style: none;
    font-size: calc(var(--base-font-size) * 0.8);
    -webkit-user-select: none;
    user-select: none;
  }

  /* Make the tabs bigger in interactive mode so they are easier to click */
  .container.interactive & .tab {
    font-size: var(--base-font-size);
  }

  /* Don't increase the tab font size too much or else it looks childish */
  .window.font-large & .tab {
    font-size: calc(var(--base-font-size) * 0.8);
  }

  .window.font-xl & .tab {
    font-size: calc(var(--base-font-size) * 0.8);
  }

  & .tab button {
    /* Reset button styles */
    -webkit-appearance: none;
    appearance: none;
    background: transparent;
    margin: 0;
    border: 0;
    font: inherit;
    color: inherit;
    cursor: pointer;

    opacity: 0.7;
    display: flex;
    align-items: center;
    width: 100%;
    padding: 0.5em 18px;
    line-height: 1;
    text-decoration: none;
  }

  @media (max-width: 400px) {
    .window[data-tab-side='top'] & .tab button span:lang(en) {
      font-size: calc(var(--base-font-size) * 0.7);
    }
  }

  @media (max-width: 350px) {
    .window[data-tab-side='top'] & .tab {
      flex-grow: 0;
    }
    .window[data-tab-side='top'] & .tab button span {
      display: none;
    }
    .window[data-tab-side='top'] & .tab button .icon {
      margin-right: 0px;
    }
  }

  .container.interactive & .tab button {
    padding: 0.7em 18px;
  }

  & .tab button .icon {
    display: block;
    width: 12px;
    height: 12px;
    margin-right: 5px;
    /* Push the icon up a little so it looks more aligned with the text */
    margin-bottom: 1px;
    fill: currentcolor;
  }

  .container.interactive & .tab button .icon {
    width: 14px;
    height: 14px;
  }

  & .tab[aria-selected] {
    background: var(--bg-color);
  }

  & .tab[aria-selected] button {
    color: var(--text-color);
  }

  & .tab:not([aria-selected]) button {
    opacity: 0.8;
    color: var(--cell-highlight-fg);
  }

  & .tab:not([aria-selected]):hover {
    filter: brightness(1.1);
  }

  & .tab:not([aria-selected]):hover button {
    opacity: 1;
  }

  & .tab.disabled {
    opacity: 0.3;
    pointer-events: none;
  }

  .container .window[data-tab-side='left'] .tab-bar & {
    display: flex;
    flex-direction: column;
  }

  .container .window[data-tab-side='right'] .tab-bar & {
    display: flex;
    flex-direction: column;
  }

  .container .window[data-tab-side='left'] & .tab {
    flex-grow: 0;
  }

  .container .window[data-tab-side='right'] & .tab {
    flex-grow: 0;
  }

  .container .window[data-tab-side='left'] & .tab button {
    padding: 0.7em;
  }

  .container .window[data-tab-side='right'] & .tab button {
    padding: 0.7em;
  }

  .container .window[data-tab-side='left'] & .tab button svg {
    margin: 0;
  }

  .container .window[data-tab-side='right'] & .tab button svg {
    margin: 0;
  }

  .container .window[data-tab-side='left'] & .tab button span {
    display: none;
  }

  .container .window[data-tab-side='right'] & .tab button span {
    display: none;
  }
}

@utility tab {
  .tabs & {
    flex-grow: 1;
    list-style: none;
    font-size: calc(var(--base-font-size) * 0.8);
    -webkit-user-select: none;
    user-select: none;
  }

  /* Make the tabs bigger in interactive mode so they are easier to click */
  .container.interactive .tabs & {
    font-size: var(--base-font-size);
  }

  /* Don't increase the tab font size too much or else it looks childish */
  .window.font-large .tabs & {
    font-size: calc(var(--base-font-size) * 0.8);
  }

  .window.font-xl .tabs & {
    font-size: calc(var(--base-font-size) * 0.8);
  }

  .tabs & button {
    /* Reset button styles */
    -webkit-appearance: none;
    appearance: none;
    background: transparent;
    margin: 0;
    border: 0;
    font: inherit;
    color: inherit;
    cursor: pointer;

    opacity: 0.7;
    display: flex;
    align-items: center;
    width: 100%;
    padding: 0.5em 18px;
    line-height: 1;
    text-decoration: none;
  }

  @media (max-width: 400px) {
    .window[data-tab-side='top'] .tabs & button span:lang(en) {
      font-size: calc(var(--base-font-size) * 0.7);
    }
  }

  @media (max-width: 350px) {
    .window[data-tab-side='top'] .tabs & {
      flex-grow: 0;
    }
    .window[data-tab-side='top'] .tabs & button span {
      display: none;
    }
    .window[data-tab-side='top'] .tabs & button .icon {
      margin-right: 0px;
    }
  }

  .container.interactive .tabs & button {
    padding: 0.7em 18px;
  }

  .tabs & button .icon {
    display: block;
    width: 12px;
    height: 12px;
    margin-right: 5px;
    /* Push the icon up a little so it looks more aligned with the text */
    margin-bottom: 1px;
    fill: currentcolor;
  }

  .container.interactive .tabs & button .icon {
    width: 14px;
    height: 14px;
  }

  .tabs &[aria-selected] {
    background: var(--bg-color);
  }

  .tabs &[aria-selected] button {
    color: var(--text-color);
  }

  .tabs &:not([aria-selected]) button {
    opacity: 0.8;
    color: var(--cell-highlight-fg);
  }

  .tabs &:not([aria-selected]):hover {
    filter: brightness(1.1);
  }

  .tabs &:not([aria-selected]):hover button {
    opacity: 1;
  }

  .tabs &.disabled {
    opacity: 0.3;
    pointer-events: none;
  }

  .container .window[data-tab-side='left'] .tabs & {
    flex-grow: 0;
  }

  .container .window[data-tab-side='right'] .tabs & {
    flex-grow: 0;
  }

  .container .window[data-tab-side='left'] .tabs & button {
    padding: 0.7em;
  }

  .container .window[data-tab-side='right'] .tabs & button {
    padding: 0.7em;
  }

  .container .window[data-tab-side='left'] .tabs & button svg {
    margin: 0;
  }

  .container .window[data-tab-side='right'] .tabs & button svg {
    margin: 0;
  }

  .container .window[data-tab-side='left'] .tabs & button span {
    display: none;
  }

  .container .window[data-tab-side='right'] .tabs & button span {
    display: none;
  }
}

@utility icon {
  @media (max-width: 350px) {
    .window[data-tab-side='top'] .tabs .tab button & {
      margin-right: 0px;
    }
  }

  .tabs .tab button & {
    display: block;
    width: 12px;
    height: 12px;
    margin-right: 5px;
    /* Push the icon up a little so it looks more aligned with the text */
    margin-bottom: 1px;
    fill: currentcolor;
  }

  .container.interactive .tabs .tab button & {
    width: 14px;
    height: 14px;
  }

  .window .content .expand-button & {
    width: 16px;
    height: 16px;
    flex-grow: 1;
  }

  .copy-overlay .copy-options .copy-preview & {
    flex-shrink: 0;
    width: 1.2em;
    height: 1.2em;
    margin-right: 6px;
    opacity: 0.6;
  }

  .copy-overlay .copy-options button.-icon-label & {
    width: 1.2em;
    height: 1.2em;
    margin-right: 6px;
    margin-top: -0.2em;
    opacity: 0.6;
  }

  .copy-overlay .cancel-button & {
    width: 1.2em;
    height: 1.2em;
    margin-right: 6px;
    margin-top: -0.2em;
    opacity: 0.6;
  }
}

@utility disabled {
  .tabs &.tab {
    opacity: 0.3;
    pointer-events: none;
  }
}

@utility settings {
  .container:not(.interactive) & {
    display: none;
  }

  .tab-bar & {
    flex-shrink: 0;
    align-self: center;
    margin: 2px;
  }

  .container .window[data-tab-side='left'] .tab-bar & {
    margin-bottom: 0.5em;
  }

  .container .window[data-tab-side='right'] .tab-bar & {
    margin-bottom: 0.5em;
  }
}

@utility pin {
  .container:not(.interactive) & {
    display: none;
  }

  .tab-bar & {
    flex-shrink: 0;
    align-self: center;
    margin: 2px;
  }
}

@utility close {
  .container:not(.interactive) & {
    display: none;
  }

  .tab-bar & {
    flex-shrink: 0;
    align-self: center;
    margin: 2px;
  }

  .window .close-button-wrapper & {
    z-index: 1;
    flex: 0 0 auto;
    margin: 4px;
    /* Drop margin since the meta element should have sufficient padding */
    margin-left: 0px;
  }
  & .close-button {
    appearance: none;
    border: none;
    line-height: 1;
    padding: 6px;
    border-radius: 20px;
    color: var(--text-color);
  }

  & .close-button {
    background: var(--bg-color);
  }

  & .close-button:hover {
    filter: brightness(1.1);
  }

  & .close-button svg {
    display: block;
    width: 15px;
    height: 15px;
    stroke: currentColor;
    stroke-linecap: round;
    stroke-linejoin: round;
    stroke-opacity: 0.7;
    fill-opacity: 0.7;
    fill: none;
  }

  & .close-button svg {
    stroke-width: 5px;
  }

  & .close-button:hover svg {
    stroke-opacity: 1;
    fill-opacity: 1;
  }

  .container .window[data-tab-side='top'] .tab-bar & {
    margin-left: 1em;
  }

  .container .window[data-tab-side='left'] .tab-bar & {
    order: -1;
    margin-top: 0.5em;
    margin-bottom: 1em;
  }

  .container .window[data-tab-side='right'] .tab-bar & {
    order: -1;
    margin-top: 0.5em;
    margin-bottom: 1em;
  }
}

@utility close-button-wrapper {
  .window & {
    flex-grow: 1;

    display: flex;
    overflow: auto;
  }

  .window & .close {
    z-index: 1;
    flex: 0 0 auto;
    margin: 4px;
    /* Drop margin since the meta element should have sufficient padding */
    margin-left: 0px;
  }
}

@utility settings-button {
  /*
  * The following uses .close .close-button because we have two configurations:
  * a) The close button is a child of the tab bar
  * b) The close button is a child of the close-button-wrapper
  */
  appearance: none;
  border: none;
  line-height: 1;
  padding: 6px;
  border-radius: 20px;
  color: var(--text-color);
  cursor: pointer;
  background: transparent;

  &:hover {
    background: var(--bg-color);
  }

  &:hover {
    filter: brightness(1.1);
  }

  & svg {
    display: block;
    width: 15px;
    height: 15px;
    stroke: currentColor;
    stroke-linecap: round;
    stroke-linejoin: round;
    stroke-opacity: 0.7;
    fill-opacity: 0.7;
    fill: none;
  }

  & svg {
    stroke-width: 2px;
  }

  &:hover svg {
    stroke-opacity: 1;
    fill-opacity: 1;
  }
}

@utility pin-button {
  appearance: none;
  border: none;
  line-height: 1;
  padding: 6px;
  border-radius: 20px;
  color: var(--text-color);
  cursor: pointer;
  background: transparent;

  &:hover {
    background: var(--bg-color);
  }

  &:hover {
    filter: brightness(1.1);
  }

  & svg {
    display: block;
    width: 15px;
    height: 15px;
    stroke: currentColor;
    stroke-linecap: round;
    stroke-linejoin: round;
    stroke-opacity: 0.7;
    fill-opacity: 0.7;
    fill: none;
  }

  & svg {
    stroke-width: 2px;
  }

  &:hover svg {
    stroke-opacity: 1;
    fill-opacity: 1;
  }

  .container.pinned & svg path {
    fill: currentColor;
  }
}

@utility close-button {
  .close & {
    appearance: none;
    border: none;
    line-height: 1;
    padding: 6px;
    border-radius: 20px;
    color: var(--text-color);
  }

  .close & {
    background: var(--bg-color);
  }

  .close &:hover {
    filter: brightness(1.1);
  }

  .close & svg {
    display: block;
    width: 15px;
    height: 15px;
    stroke: currentColor;
    stroke-linecap: round;
    stroke-linejoin: round;
    stroke-opacity: 0.7;
    fill-opacity: 0.7;
    fill: none;
  }

  .close & svg {
    stroke-width: 5px;
  }

  .close &:hover svg {
    stroke-opacity: 1;
    fill-opacity: 1;
  }
}

@utility pinned {
  &.container .pin-button svg path {
    fill: currentColor;
  }
}

@utility expandable {
  /* Expandable container */

  .window .content & {
    overflow: auto;
    overscroll-behavior: contain;
    scrollbar-gutter: stable;
  }

  @supports (scrollbar-width: thin) {
    .window .content & {
      scrollbar-width: thin;
      scrollbar-color: var(--scrollbar-fg) var(--scrollbar-bg);
    }
  }

  @supports not (scrollbar-width: thin) {
    .window .content &::-webkit-scrollbar {
      width: 7px;
      background-color: var(--scrollbar-bg);
    }

    .window .content &::-webkit-scrollbar-thumb {
      background-color: var(--scrollbar-fg);
    }
  }

  .window .content & .fold-point {
    display: contents;
  }

  /*
   * If the list has been expanded, however, there is no need to space the kanji
   * items out evenly.
   */
  &.expanded .kanjilist {
    grid-auto-rows: auto;
  }
}

@utility fold-point {
  .window .content .expandable & {
    display: contents;
  }
}

@utility expand-button {
  /* Expand button */

  .window .content & {
    /* Box layout */
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    padding: 8px;

    /* Positioning */
    position: sticky;
    bottom: 0;

    /* Reset button styles */
    appearance: none;
    border: 0;
    margin: 0;
    cursor: pointer;
    font: inherit;
    line-height: 1;
    text-decoration: none;

    /* Colors */
    background: linear-gradient(
      to bottom,
      rgba(var(--bg-rgb), 0.3),
      var(--bg-color) 80%
    );
    color: rgba(var(--expand-button-rgb), 0.8);
  }

  .window .content &:hover {
    color: var(--expand-button-color);
    /* Use outline instead of border so it doesn't affect the layout (even if we
    * try to reserve space for the border using a transparent border it will not
    * blend with the underlying element since you can't have a fully transparent
    * border on a non-transparent background. */
    outline: 1px var(--expand-button-color) dotted;
    background: linear-gradient(
      to bottom,
      rgba(var(--bg-rgb), 0.8),
      var(--bg-color) 80%
    );
  }

  .window .content & .icon {
    width: 16px;
    height: 16px;
    flex-grow: 1;
  }

  .window .content & kbd {
    color: var(--expand-button-color);
    font-family: monospace;
    font-weight: 800;
    padding: 0.1rem 0.2rem;
    border-radius: 0.2rem;
    background: rgba(255, 255, 255, 0.1);
    border: 1px solid var(--expand-button-color) !important;
  }
}

@utility wordlist {
  /* Word display */
  display: flex;
  flex-direction: column;
  gap: 6px;
  margin-top: 8px;
  margin-bottom: 8px;

  & .entry {
    scroll-snap-align: start;
    /* This matches the margin at the top of the word list */
    scroll-margin-top: 8px;
    scroll-margin-bottom: var(--expand-button-allowance);
  }

  .window.font-large & {
    gap: 12px;
  }

  .window.font-xl & {
    gap: 16px;
  }

  /*
  * Bonus name
  */

  & .bonus-name {
    margin-top: 8px;
    margin-bottom: 3px;
    background: var(--meta-bg);
    scroll-snap-align: start;
    scroll-margin-top: 8px;
  }

  & .bonus-name .more {
    padding: 0px 14px;
  }
}

@utility entry {
  .wordlist & {
    scroll-snap-align: start;
    /* This matches the margin at the top of the word list */
    scroll-margin-top: 8px;
    scroll-margin-bottom: var(--expand-button-allowance);
  }
  padding: 4px 14px;
  line-height: 1.3;

  & * {
    line-height: 1.3;
  }

  .window &.-selected .w-kanji .wk-level {
    border-color: var(--selected-highlight);
  }

  @media (hover) {
    .container.interactive &:hover .w-kanji .wk-level {
      color: var(--selected-highlight);
      border-color: var(--selected-highlight);
    }
  }

  .window:not(.-has-overlay) &.-selected {
    color: var(--selected-highlight);
    background: var(--selected-bg);
    border-radius: 2px;
  }

  @media (hover) {
    .container.interactive &:not(:hover) {
      transition: background-color 0.08s ease-out;
    }
    .container.interactive &:hover {
      color: var(--selected-highlight);
      background: var(--hover-bg);
      border-radius: 2px;
      cursor: pointer;
    }
    .container.interactive &.-selected:hover {
      background: var(--selected-bg);
    }
  }

  .window &.-selected .w-def .tag {
    color: var(--selected-tag-color);
    border-color: var(--selected-tag-border) !important;
  }

  @media (hover) {
    .container.interactive &:hover .w-def .tag {
      color: var(--selected-tag-color);
      border-color: var(--selected-tag-border) !important;
    }
  }

  .window &.-selected .w-kanji {
    color: var(--selected-highlight);
  }

  @media (hover) {
    .container.interactive &:hover .w-kanji {
      color: var(--selected-highlight);
    }
  }

  .window &.-selected .w-kana {
    color: var(--selected-reading-highlight);
  }

  .window &.-selected .w-romaji {
    color: var(--selected-reading-highlight);
  }

  @media (hover) {
    .container.interactive &:hover .w-kana {
      color: var(--selected-reading-highlight);
    }

    .container.interactive &:hover .w-romaji {
      color: var(--selected-reading-highlight);
    }
  }

  .window &.-selected .w-def {
    color: var(--selected-def-color);
  }

  .window &.-selected .w-def * {
    color: var(--selected-def-color);
  }

  @media (hover) {
    .container.interactive &:hover .w-def {
      color: var(--selected-def-color);
    }

    .container.interactive &:hover .w-def * {
      color: var(--selected-def-color);
    }
  }

  .window &.-selected .w-conj {
    color: var(--selected-conj-color);
  }

  @media (hover) {
    .container.interactive &:hover .w-conj {
      color: var(--selected-conj-color);
    }
  }

  .window &.-flash {
    animation: tenten-ja-flash 0.5s;
  }
}

@utility more {
  padding: 4px 14px;

  .wordlist .bonus-name & {
    padding: 0px 14px;
  }
}

@utility w-kanji {
  font-size: calc(20 / 14 * var(--base-font-size));
  margin-right: 0.7em;
  color: var(--primary-highlight);

  & .dimmed {
    opacity: 0.6;
  }

  & .separator {
    opacity: 0.6;
  }

  & .wk-level {
    display: inline-block;
    font-size: calc(10 / 14 * var(--base-font-size));
    border-radius: 3px;
    margin-left: 0.5em;
    margin-right: 0.5em;
    padding: 3px 3px 2px;
    line-height: 1;
    white-space: nowrap;
    transform: translateY(-3px);
  }

  & .bp-tag {
    display: inline-block;
    font-size: calc(10 / 14 * var(--base-font-size));
    border-radius: 3px;
    margin-left: 0.5em;
    margin-right: 0.5em;
    padding: 3px 3px 2px;
    line-height: 1;
    white-space: nowrap;
    transform: translateY(-3px);
  }

  & .wk-level {
    color: var(--primary-highlight);
    border: 1px solid var(--primary-highlight);
    text-underline-offset: 2px;
  }

  /*
   * Make sure to only show the dotted link underline when the popup is
   * interactive.
   */
  & .wk-level {
    text-decoration: none;
  }
  & .wk-level::before {
    text-decoration: none;
  }

  .container.interactive & .wk-level {
    text-decoration: underline dotted;
  }

  .container.interactive & .wk-level::before {
    text-decoration: underline dotted;
  }

  & .wk-level::before {
    display: inline-block;
    content: 'WK';
    margin-right: 0.2em;
  }

  .window .entry.-selected & .wk-level {
    border-color: var(--selected-highlight);
  }

  @media (hover) {
    .container.interactive & .wk-level:hover {
      background: color(from var(--selected-highlight) srgb r g b / 0.1);
    }

    .container.interactive .entry:hover & .wk-level {
      color: var(--selected-highlight);
      border-color: var(--selected-highlight);
    }
  }

  & .bp-tag.-vocab {
    border: 1px solid var(--bunpro-vocab);
    color: var(--bunpro-vocab);
  }
  & .bp-tag.-grammar {
    border: 1px solid var(--bunpro-grammar);
    color: var(--bunpro-grammar);
  }

  & .bp-tag .bp-src {
    margin-left: 0.3em;
    color: var(--bunpro-src);
  }

  & .w-head-info {
    margin-left: 0.3em;
    font-size: calc(10 / 14 * var(--base-font-size));
  }

  & .svgicon {
    display: inline-block;
    width: 12px;
    height: 12px;
    margin-left: 3px;
    margin-right: 3px;
    fill: currentcolor;
  }

  & .svgicon path {
    fill: currentcolor;
  }

  .window .entry.-selected & {
    color: var(--selected-highlight);
  }

  @media (hover) {
    .container.interactive .entry:hover & {
      color: var(--selected-highlight);
    }
  }
}

@utility dimmed {
  .w-kanji & {
    opacity: 0.6;
  }

  .w-kana & {
    opacity: 0.6;
  }
}

@utility separator {
  .w-kanji & {
    opacity: 0.6;
  }

  .w-kana & {
    opacity: 0.6;
  }
}

@utility w-kana {
  & .dimmed {
    opacity: 0.6;
  }

  & .separator {
    opacity: 0.6;
  }

  & .bp-tag {
    display: inline-block;
    font-size: calc(10 / 14 * var(--base-font-size));
    border-radius: 3px;
    margin-left: 0.5em;
    margin-right: 0.5em;
    padding: 3px 3px 2px;
    line-height: 1;
    white-space: nowrap;
    transform: translateY(-3px);
  }

  & .bp-tag.-vocab {
    border: 1px solid var(--bunpro-vocab);
    color: var(--bunpro-vocab);
  }
  & .bp-tag.-grammar {
    border: 1px solid var(--bunpro-grammar);
    color: var(--bunpro-grammar);
  }

  & .bp-tag .bp-src {
    margin-left: 0.3em;
    color: var(--bunpro-src);
  }
  font-size: calc(18 / 14 * var(--base-font-size));
  margin-right: 0.3em;

  & > .w-heiban {
    border-top: 1.5px dotted currentcolor !important;
  }

  & > .w-binary {
    /* Add a gap below so the border doesn't overlap with the definition */
    display: inline-block;
    margin-bottom: 0.2em;
  }

  & > .w-binary > * {
    /* Drop gaps between borders */
    margin: 0;
    /* Make room for the borders
    * (and to compensate for the extra margin we added to the wrapper above) */
    font-size: 90%;
    border: 0 dotted currentcolor;
    --border-width: 1.5px;
  }

  & > .w-binary.-hi-contrast > * {
    border-color: var(--hi-contrast-pitch-accent);
    --border-width: 2px;
  }

  & > .w-binary > .h-l {
    border-top-width: var(--border-width);
    border-right-width: var(--border-width);
  }

  & > .w-binary > .l-h {
    border-bottom-width: var(--border-width);
    border-right-width: var(--border-width);
  }

  & > .w-binary > .h {
    border-top-width: var(--border-width);
  }

  & > .w-binary > .l {
    border-bottom-width: var(--border-width);
  }

  & + .w-romaji {
    margin-left: 0.3em;
  }
  color: var(--reading-highlight);

  & .w-head-info {
    margin-left: 0.3em;
    font-size: calc(10 / 14 * var(--base-font-size));
  }

  & .svgicon {
    display: inline-block;
    width: 12px;
    height: 12px;
    margin-left: 3px;
    margin-right: 3px;
    fill: currentcolor;
  }

  & .svgicon path {
    fill: currentcolor;
  }

  .window .entry.-selected & {
    color: var(--selected-reading-highlight);
  }

  @media (hover) {
    .container.interactive .entry:hover & {
      color: var(--selected-reading-highlight);
    }
  }
}

@utility wk-level {
  .w-kanji & {
    display: inline-block;
    font-size: calc(10 / 14 * var(--base-font-size));
    border-radius: 3px;
    margin-left: 0.5em;
    margin-right: 0.5em;
    padding: 3px 3px 2px;
    line-height: 1;
    white-space: nowrap;
    transform: translateY(-3px);
  }

  .w-kanji & {
    color: var(--primary-highlight);
    border: 1px solid var(--primary-highlight);
    text-underline-offset: 2px;
  }

  /*
   * Make sure to only show the dotted link underline when the popup is
   * interactive.
   */
  .w-kanji & {
    text-decoration: none;
  }

  .w-kanji &::before {
    text-decoration: none;
  }

  .container.interactive .w-kanji & {
    text-decoration: underline dotted;
  }

  .container.interactive .w-kanji &::before {
    text-decoration: underline dotted;
  }

  .w-kanji &::before {
    display: inline-block;
    content: 'WK';
    margin-right: 0.2em;
  }

  .window .entry.-selected .w-kanji & {
    border-color: var(--selected-highlight);
  }

  @media (hover) {
    .container.interactive .w-kanji &:hover {
      background: color(from var(--selected-highlight) srgb r g b / 0.1);
    }

    .container.interactive .entry:hover .w-kanji & {
      color: var(--selected-highlight);
      border-color: var(--selected-highlight);
    }
  }
}

@utility bp-tag {
  .w-kanji & {
    display: inline-block;
    font-size: calc(10 / 14 * var(--base-font-size));
    border-radius: 3px;
    margin-left: 0.5em;
    margin-right: 0.5em;
    padding: 3px 3px 2px;
    line-height: 1;
    white-space: nowrap;
    transform: translateY(-3px);
  }

  .w-kana & {
    display: inline-block;
    font-size: calc(10 / 14 * var(--base-font-size));
    border-radius: 3px;
    margin-left: 0.5em;
    margin-right: 0.5em;
    padding: 3px 3px 2px;
    line-height: 1;
    white-space: nowrap;
    transform: translateY(-3px);
  }

  .w-kanji &.-vocab {
    border: 1px solid var(--bunpro-vocab);
    color: var(--bunpro-vocab);
  }

  .w-kana &.-vocab {
    border: 1px solid var(--bunpro-vocab);
    color: var(--bunpro-vocab);
  }
  .w-kanji &.-grammar {
    border: 1px solid var(--bunpro-grammar);
    color: var(--bunpro-grammar);
  }

  .w-kana &.-grammar {
    border: 1px solid var(--bunpro-grammar);
    color: var(--bunpro-grammar);
  }

  .w-kanji & .bp-src {
    margin-left: 0.3em;
    color: var(--bunpro-src);
  }

  .w-kana & .bp-src {
    margin-left: 0.3em;
    color: var(--bunpro-src);
  }
}

@utility -selected {
  .window &.entry .w-kanji .wk-level {
    border-color: var(--selected-highlight);
  }

  .window:not(.-has-overlay) &.entry {
    color: var(--selected-highlight);
    background: var(--selected-bg);
    border-radius: 2px;
  }

  @media (hover) {
    .container.interactive &.entry:hover {
      background: var(--selected-bg);
    }
  }

  .window &.entry .w-def .tag {
    color: var(--selected-tag-color);
    border-color: var(--selected-tag-border) !important;
  }

  .window &.entry .w-kanji {
    color: var(--selected-highlight);
  }

  .window &.entry .w-kana {
    color: var(--selected-reading-highlight);
  }

  .window &.entry .w-romaji {
    color: var(--selected-reading-highlight);
  }

  .window &.entry .w-def {
    color: var(--selected-def-color);
  }

  .window &.entry .w-def * {
    color: var(--selected-def-color);
  }

  .window &.entry .w-conj {
    color: var(--selected-conj-color);
  }
}

@utility -vocab {
  .w-kanji &.bp-tag {
    border: 1px solid var(--bunpro-vocab);
    color: var(--bunpro-vocab);
  }

  .w-kana &.bp-tag {
    border: 1px solid var(--bunpro-vocab);
    color: var(--bunpro-vocab);
  }
}

@utility -grammar {
  .w-kanji &.bp-tag {
    border: 1px solid var(--bunpro-grammar);
    color: var(--bunpro-grammar);
  }

  .w-kana &.bp-tag {
    border: 1px solid var(--bunpro-grammar);
    color: var(--bunpro-grammar);
  }
}

@utility bp-src {
  .w-kanji .bp-tag & {
    margin-left: 0.3em;
    color: var(--bunpro-src);
  }

  .w-kana .bp-tag & {
    margin-left: 0.3em;
    color: var(--bunpro-src);
  }
}

@utility w-heiban {
  .w-kana > & {
    border-top: 1.5px dotted currentcolor !important;
  }
}

@utility w-binary {
  .w-kana > & {
    /* Add a gap below so the border doesn't overlap with the definition */
    display: inline-block;
    margin-bottom: 0.2em;
  }

  .w-kana > & > * {
    /* Drop gaps between borders */
    margin: 0;
    /* Make room for the borders
    * (and to compensate for the extra margin we added to the wrapper above) */
    font-size: 90%;
    border: 0 dotted currentcolor;
    --border-width: 1.5px;
  }

  .w-kana > &.-hi-contrast > * {
    border-color: var(--hi-contrast-pitch-accent);
    --border-width: 2px;
  }

  .w-kana > & > .h-l {
    border-top-width: var(--border-width);
    border-right-width: var(--border-width);
  }

  .w-kana > & > .l-h {
    border-bottom-width: var(--border-width);
    border-right-width: var(--border-width);
  }

  .w-kana > & > .h {
    border-top-width: var(--border-width);
  }

  .w-kana > & > .l {
    border-bottom-width: var(--border-width);
  }
}

@utility -hi-contrast {
  .w-kana > &.w-binary > * {
    border-color: var(--hi-contrast-pitch-accent);
    --border-width: 2px;
  }
}

@utility h-l {
  .w-kana > .w-binary > & {
    border-top-width: var(--border-width);
    border-right-width: var(--border-width);
  }
}

@utility l-h {
  .w-kana > .w-binary > & {
    border-bottom-width: var(--border-width);
    border-right-width: var(--border-width);
  }
}

@utility h {
  .w-kana > .w-binary > & {
    border-top-width: var(--border-width);
  }
}

@utility l {
  .w-kana > .w-binary > & {
    border-bottom-width: var(--border-width);
  }
}

@utility w-romaji {
  font-size: var(--base-font-size);
  margin-right: 0.3em;

  .w-kana + & {
    margin-left: 0.3em;
  }
  color: var(--reading-highlight);

  .window .entry.-selected & {
    color: var(--selected-reading-highlight);
  }

  @media (hover) {
    .container.interactive .entry:hover & {
      color: var(--selected-reading-highlight);
    }
  }
}

@utility w-head-info {
  .w-kanji & {
    margin-left: 0.3em;
    font-size: calc(10 / 14 * var(--base-font-size));
  }

  .w-kana & {
    margin-left: 0.3em;
    font-size: calc(10 / 14 * var(--base-font-size));
  }
}

@utility svgicon {
  .w-kanji & {
    display: inline-block;
    width: 12px;
    height: 12px;
    margin-left: 3px;
    margin-right: 3px;
    fill: currentcolor;
  }

  .w-kana & {
    display: inline-block;
    width: 12px;
    height: 12px;
    margin-left: 3px;
    margin-right: 3px;
    fill: currentcolor;
  }

  .w-kanji & path {
    fill: currentcolor;
  }

  .w-kana & path {
    fill: currentcolor;
  }
}

@utility w-conj {
  font-size: calc(12 / 14 * var(--base-font-size));
  color: var(--conj-color);

  .window .entry.-selected & {
    color: var(--selected-conj-color);
  }

  @media (hover) {
    .container.interactive .entry:hover & {
      color: var(--selected-conj-color);
    }
  }
}

@utility w-def {
  font-size: var(--base-font-size);

  & .w-inf {
    font-size: calc(12 / 14 * var(--base-font-size));
  }

  /* Give group headings a bit more space. They typically consist of a series of
  * which can easily look cramped when there are tags on the line above or below
  * it. */
  & .w-group-head {
    margin-top: 2px;
    margin-bottom: 3px;
  }

  /* Especially when we have group headings amongst other definitions, we want a
  * bit more vertical space before they start. */
  & ol + .w-group-head {
    margin-top: 6px;
  }

  & ul {
    padding-left: 1.5em;
    margin: 0;
  }

  /* Add a little breathing space between native language definitions and
  * subsequent English definitions. */
  & ul + .w-group-head {
    margin-top: 6px;
  }
  & ul + ol {
    margin-top: 6px;
  }

  & ol {
    padding-left: 1.5em;
    list-style-type: decimal !important;
    margin: 0;
  }

  & ol li {
    list-style-type: decimal !important;
    font-size: var(--base-font-size);
    line-height: 1.5;
  }

  & ul li {
    list-style-type: circle !important;
    font-size: var(--base-font-size);
    line-height: 1.5;
  }

  &.foreign {
    opacity: 0.85;
  }

  & .foreign {
    opacity: 0.85;
  }

  & .w-type {
    font-size: calc(12 / 14 * var(--base-font-size));
  }

  & .tag {
    font-size: calc(10 / 14 * var(--base-font-size));
    border: 1px solid var(--tag-border) !important;
    border-radius: 3px;
    margin-left: 0.5em;
    padding: 0px 3px;
    white-space: nowrap;
  }

  & .tag-fem {
    background: var(--tag-pink-bg);
  }

  & .tag-masc {
    background: var(--tag-blue-bg);
  }

  & .tag-place {
    background: var(--tag-green-bg);
  }

  & .w-field {
    background: var(--tag-green-bg);
  }

  & .w-misc {
    background: var(--tag-blue-bg);
  }

  & .w-dial {
    background: var(--tag-pink-bg);
  }

  & .w-pos {
    margin-left: 0em;
    margin-right: 0.5em;
  }

  & .w-field {
    margin-left: 0em;
    margin-right: 0.5em;
  }

  & .w-misc {
    margin-left: 0em;
    margin-right: 0.5em;
  }

  & .w-dial {
    margin-left: 0em;
    margin-right: 0.5em;
  }

  & .w-lsrc {
    font-size: calc(12 / 14 * var(--base-font-size));
  }

  & .w-lsrc * {
    font-size: calc(12 / 14 * var(--base-font-size));
  }

  .window .entry.-selected & .tag {
    color: var(--selected-tag-color);
    border-color: var(--selected-tag-border) !important;
  }

  @media (hover) {
    .container.interactive .entry:hover & .tag {
      color: var(--selected-tag-color);
      border-color: var(--selected-tag-border) !important;
    }
  }

  .window .entry.-selected & {
    color: var(--selected-def-color);
  }

  .window .entry.-selected & * {
    color: var(--selected-def-color);
  }

  @media (hover) {
    .container.interactive .entry:hover & {
      color: var(--selected-def-color);
    }

    .container.interactive .entry:hover & * {
      color: var(--selected-def-color);
    }
  }
}

@utility w-inf {
  .w-def & {
    font-size: calc(12 / 14 * var(--base-font-size));
  }
}

@utility w-group-head {
  /* Give group headings a bit more space. They typically consist of a series of
  * which can easily look cramped when there are tags on the line above or below
  * it. */
  .w-def & {
    margin-top: 2px;
    margin-bottom: 3px;
  }

  /* Especially when we have group headings amongst other definitions, we want a
  * bit more vertical space before they start. */
  .w-def ol + & {
    margin-top: 6px;
  }

  /* Add a little breathing space between native language definitions and
  * subsequent English definitions. */
  .w-def ul + & {
    margin-top: 6px;
  }
}

@utility foreign {
  &.w-def {
    opacity: 0.85;
  }

  .w-def & {
    opacity: 0.85;
  }
}

@utility w-type {
  .w-def & {
    font-size: calc(12 / 14 * var(--base-font-size));
  }
}

@utility tag {
  .w-def & {
    font-size: calc(10 / 14 * var(--base-font-size));
    border: 1px solid var(--tag-border) !important;
    border-radius: 3px;
    margin-left: 0.5em;
    padding: 0px 3px;
    white-space: nowrap;
  }

  .window .entry.-selected .w-def & {
    color: var(--selected-tag-color);
    border-color: var(--selected-tag-border) !important;
  }

  @media (hover) {
    .container.interactive .entry:hover .w-def & {
      color: var(--selected-tag-color);
      border-color: var(--selected-tag-border) !important;
    }
  }
}

@utility tag-fem {
  .w-def & {
    background: var(--tag-pink-bg);
  }
}

@utility tag-masc {
  .w-def & {
    background: var(--tag-blue-bg);
  }
}

@utility tag-place {
  .w-def & {
    background: var(--tag-green-bg);
  }
}

@utility w-field {
  .w-def & {
    background: var(--tag-green-bg);
  }

  .w-def & {
    margin-left: 0em;
    margin-right: 0.5em;
  }
}

@utility w-misc {
  .w-def & {
    background: var(--tag-blue-bg);
  }

  .w-def & {
    margin-left: 0em;
    margin-right: 0.5em;
  }
}

@utility w-dial {
  .w-def & {
    background: var(--tag-pink-bg);
  }

  .w-def & {
    margin-left: 0em;
    margin-right: 0.5em;
  }
}

@utility w-pos {
  .w-def & {
    margin-left: 0em;
    margin-right: 0.5em;
  }
}

@utility w-lsrc {
  .w-def & {
    font-size: calc(12 / 14 * var(--base-font-size));
  }

  .w-def & * {
    font-size: calc(12 / 14 * var(--base-font-size));
  }
}

@utility -flash {
  .window &.entry {
    animation: tenten-ja-flash 0.5s;
  }
}

@utility title {
  background: var(--title-bg);
  color: var(--title-fg);
  font-size: calc(10 / 14 * var(--base-font-size));
  padding: 10px 14px 6px;
  border-radius: 5px 5px 0 0;
  margin-bottom: 3px;
}

@utility kanjilist {
  /* Kanji display */
  /*
    * Make each kanji item have the same height so that when we scroll the next
    * one into view it fits.
    */
  display: grid;
  grid-auto-rows: 1fr;

  /*
   * If the list has been expanded, however, there is no need to space the kanji
   * items out evenly.
   */
  .expandable.expanded & {
    grid-auto-rows: auto;
  }
}

@utility expanded {
  /*
   * If the list has been expanded, however, there is no need to space the kanji
   * items out evenly.
   */
  &.expandable .kanjilist {
    grid-auto-rows: auto;
  }
}

@utility status {
  .status-bar > & {
    display: flex;
    align-items: baseline;
  }

  .window.-copy-finished .status-bar > & {
    opacity: 0;
    animation:
      fade-in 0.4s linear forwards,
      fade-out 0.3s 0.9s forwards;
  }

  .window.-copy-error .status-bar > & {
    opacity: 0;
    animation: fade-in 0.4s linear forwards;
    background: rgba(255, 204, 204, 0.8);
    color: #b43e3e;
  }
}

@utility -subdued {
  &.status-bar {
    opacity: 0.7;
  }
}

@utility spinner {
  .status-bar & {
    display: inline-block;
    width: 12px;
    height: 12px;
    margin-right: 7px;
    fill: currentcolor;
    animation: spin-ccw 0.8s linear infinite;
  }
}

@utility -copy-finished {
  &.window .status-bar > .keys {
    animation: fade-out 0.4s linear forwards;
  }

  &.window .status-bar > .status {
    opacity: 0;
    animation:
      fade-in 0.4s linear forwards,
      fade-out 0.3s 0.9s forwards;
  }

  &.window .status-bar {
    animation: roll-up 0.3s 1s forwards;
  }
}

@utility keys {
  .window.-copy-finished .status-bar > & {
    animation: fade-out 0.4s linear forwards;
  }

  .window.-copy-error .status-bar > & {
    animation: fade-out 0.4s linear forwards;
  }
}

@utility -copy-error {
  & .window .status-bar > .keys {
    animation: fade-out 0.4s linear forwards;
  }

  &.window .status-bar > .status {
    opacity: 0;
    animation: fade-in 0.4s linear forwards;
    background: rgba(255, 204, 204, 0.8);
    color: #b43e3e;
  }
}

@utility bonus-name {
  /*
  * Bonus name
  */

  .wordlist & {
    margin-top: 8px;
    margin-bottom: 3px;
    background: var(--meta-bg);
    scroll-snap-align: start;
    scroll-margin-top: 8px;
  }

  .wordlist & .more {
    padding: 0px 14px;
  }
}

@utility copy-overlay {
  /*
  * Copy overlay for when the popup is interactive
  */
  box-sizing: border-box;
  width: 100%;
  display: flex;
  flex-direction: column;
  /* It's important to align to the top so that if the popup is very long we
    * don't end up putting the copy buttons off screen somewhere. */
  justify-content: start;
  align-items: center;
  padding-top: 24px;
  padding-bottom: 24px;
  isolation: isolate;
  overflow: hidden;

  /* We fade the background so we always want a dark foreground color here,
    * regardless of the theme. */
  color: #1d1a19;

  .window.-has-overlay .content .grid-stack > & {
    background: hsla(0, 0%, 97%, 0.6);
    transition: background-color 0.3s ease-in-out;
  }

  & .copy-heading {
    opacity: 0.8;
  }

  & .copy-options {
    max-width: 90%;
    list-style: none;
    margin: 0 8px;
    padding: 0;
  }

  & .copy-options li {
    margin-top: 12px;
    margin-bottom: 12px;
  }

  /* Reset some button styles */
  & button {
    -webkit-appearance: none;
    appearance: none;
    background: transparent;
    margin: 0;
    padding: 0;
    border: 0;
    font: inherit;
    color: inherit;
    cursor: pointer;
  }

  & .copy-options li button {
    font-size: calc(16 / 14 * var(--base-font-size));
    font-weight: 600;
    width: 100%;
    min-height: 60px;
    background: white;
    padding: 8px 32px;
    border-radius: 16px;
    --shadow-color: 0deg 0% 0%;
    box-shadow:
      0.2px 0.6px 0.5px hsl(var(--shadow-color) / 0.12),
      0.4px 1.2px 1.1px -1.5px hsl(var(--shadow-color) / 0.09),
      1.4px 3.7px 3.3px -3px hsl(var(--shadow-color) / 0.06),
      3.8px 10.3px 9.1px -4.4px hsl(var(--shadow-color) / 0.04);
    border: 0.1px solid hsla(0deg, 0%, 0%, 0.1);
  }

  & .copy-options .copy-preview {
    margin-top: calc(4 / 14 * var(--base-font-size));
    display: flex;
    align-items: center;
    white-space: nowrap;
    color: #817470;
    font-size: calc(12 / 14 * var(--base-font-size));
    font-weight: 400;
    max-width: 200px;
    overflow: hidden;
    -webkit-mask-image: linear-gradient(to right, black 180px, transparent);
    mask-image: linear-gradient(to right, black 180px, transparent);
  }

  & .copy-options .copy-preview .icon {
    flex-shrink: 0;
    width: 1.2em;
    height: 1.2em;
    margin-right: 6px;
    opacity: 0.6;
  }

  & .copy-options .copy-preview span {
    min-width: 0;
  }

  & .copy-options button.-icon-label {
    display: flex;
    justify-content: center;
    align-items: center;
    line-height: 1.5;
  }

  & .cancel-button {
    display: flex;
    justify-content: center;
    align-items: center;
    line-height: 1.5;
  }

  & .copy-options button.-icon-label .icon {
    width: 1.2em;
    height: 1.2em;
    margin-right: 6px;
    margin-top: -0.2em;
    opacity: 0.6;
  }

  & .cancel-button .icon {
    width: 1.2em;
    height: 1.2em;
    margin-right: 6px;
    margin-top: -0.2em;
    opacity: 0.6;
  }

  & .cancel-button {
    padding: 12px 36px;
    color: rgba(0, 0, 0, 0.4);
  }
}

@utility -has-overlay {
  /* Blurring for the entry area when the copy overlay is showing */
  &.window .content .grid-stack > :first-child {
    pointer-events: none;
    filter: blur(20px);
    transition: filter 0.3s ease-in-out;
  }

  &.window .content .grid-stack > .copy-overlay {
    background: hsla(0, 0%, 97%, 0.6);
    transition: background-color 0.3s ease-in-out;
  }

  /* If the overlay is showing, don't constrain the window height since it might
  * mean that the buttons on the overlay get cut off. */
  &.window {
    max-height: none;
  }

  /* Let the size of the overlay determine the overall size of the popup contents.
  *
  * This prevents the window from suddenly getting very large when we drop the
  * max-height definition above.
  *
  * Ideally we'd only do this if we were actually going to constrain the height
  * anyway, but that's hard to detect so we just do this unconditionally and so
  * far it seems to work ok. */
  &.window .content .grid-stack > .entry-data {
    position: absolute;
    width: 100%;
  }
}

@utility grid-stack {
  /* Blurring for the entry area when the copy overlay is showing */
  .window.-has-overlay .content & > :first-child {
    pointer-events: none;
    filter: blur(20px);
    transition: filter 0.3s ease-in-out;
  }

  .window.-has-overlay .content & > .copy-overlay {
    background: hsla(0, 0%, 97%, 0.6);
    transition: background-color 0.3s ease-in-out;
  }

  /* Let the size of the overlay determine the overall size of the popup contents.
  *
  * This prevents the window from suddenly getting very large when we drop the
  * max-height definition above.
  *
  * Ideally we'd only do this if we were actually going to constrain the height
  * anyway, but that's hard to detect so we just do this unconditionally and so
  * far it seems to work ok. */
  .window.-has-overlay .content & > .entry-data {
    position: absolute;
    width: 100%;
  }

  /*
  * Utility: grid stack
  */
  display: grid;
  grid-template-rows: [stack-start] auto [stack-end];

  & > * {
    grid-column: 1 / -1;
    grid-row: stack-start / stack-end;
  }
}

@utility entry-data {
  /* Let the size of the overlay determine the overall size of the popup contents.
  *
  * This prevents the window from suddenly getting very large when we drop the
  * max-height definition above.
  *
  * Ideally we'd only do this if we were actually going to constrain the height
  * anyway, but that's hard to detect so we just do this unconditionally and so
  * far it seems to work ok. */
  .window.-has-overlay .content .grid-stack > & {
    position: absolute;
    width: 100%;
  }
}

@utility copy-heading {
  .copy-overlay & {
    opacity: 0.8;
  }
}

@utility copy-options {
  .copy-overlay & {
    max-width: 90%;
    list-style: none;
    margin: 0 8px;
    padding: 0;
  }

  .copy-overlay & li {
    margin-top: 12px;
    margin-bottom: 12px;
  }

  .copy-overlay & li button {
    font-size: calc(16 / 14 * var(--base-font-size));
    font-weight: 600;
    width: 100%;
    min-height: 60px;
    background: white;
    padding: 8px 32px;
    border-radius: 16px;
    --shadow-color: 0deg 0% 0%;
    box-shadow:
      0.2px 0.6px 0.5px hsl(var(--shadow-color) / 0.12),
      0.4px 1.2px 1.1px -1.5px hsl(var(--shadow-color) / 0.09),
      1.4px 3.7px 3.3px -3px hsl(var(--shadow-color) / 0.06),
      3.8px 10.3px 9.1px -4.4px hsl(var(--shadow-color) / 0.04);
    border: 0.1px solid hsla(0deg, 0%, 0%, 0.1);
  }

  .copy-overlay & .copy-preview {
    margin-top: calc(4 / 14 * var(--base-font-size));
    display: flex;
    align-items: center;
    white-space: nowrap;
    color: #817470;
    font-size: calc(12 / 14 * var(--base-font-size));
    font-weight: 400;
    max-width: 200px;
    overflow: hidden;
    -webkit-mask-image: linear-gradient(to right, black 180px, transparent);
    mask-image: linear-gradient(to right, black 180px, transparent);
  }

  .copy-overlay & .copy-preview .icon {
    flex-shrink: 0;
    width: 1.2em;
    height: 1.2em;
    margin-right: 6px;
    opacity: 0.6;
  }

  .copy-overlay & .copy-preview span {
    min-width: 0;
  }

  .copy-overlay & button.-icon-label {
    display: flex;
    justify-content: center;
    align-items: center;
    line-height: 1.5;
  }

  .copy-overlay & button.-icon-label .icon {
    width: 1.2em;
    height: 1.2em;
    margin-right: 6px;
    margin-top: -0.2em;
    opacity: 0.6;
  }
}

@utility copy-preview {
  .copy-overlay .copy-options & {
    margin-top: calc(4 / 14 * var(--base-font-size));
    display: flex;
    align-items: center;
    white-space: nowrap;
    color: #817470;
    font-size: calc(12 / 14 * var(--base-font-size));
    font-weight: 400;
    max-width: 200px;
    overflow: hidden;
    -webkit-mask-image: linear-gradient(to right, black 180px, transparent);
    mask-image: linear-gradient(to right, black 180px, transparent);
  }

  .copy-overlay .copy-options & .icon {
    flex-shrink: 0;
    width: 1.2em;
    height: 1.2em;
    margin-right: 6px;
    opacity: 0.6;
  }

  .copy-overlay .copy-options & span {
    min-width: 0;
  }
}

@utility -icon-label {
  .copy-overlay .copy-options &button {
    display: flex;
    justify-content: center;
    align-items: center;
    line-height: 1.5;
  }

  .copy-overlay .copy-options &button .icon {
    width: 1.2em;
    height: 1.2em;
    margin-right: 6px;
    margin-top: -0.2em;
    opacity: 0.6;
  }
}

@utility cancel-button {
  .copy-overlay & {
    display: flex;
    justify-content: center;
    align-items: center;
    line-height: 1.5;
  }

  .copy-overlay & .icon {
    width: 1.2em;
    height: 1.2em;
    margin-right: 6px;
    margin-top: -0.2em;
    opacity: 0.6;
  }

  .copy-overlay & {
    padding: 12px 36px;
    color: rgba(0, 0, 0, 0.4);
  }
}

@utility -stack {
  display: grid;
  grid-template-rows: [stack-start] auto [stack-end];

  & > * {
    grid-column: 1 / -1;
    grid-row: stack-start / stack-end;
  }
}

@utility arrow {
  /*
  * Arrow
  */
  position: absolute;
  overflow: hidden;

  /* Desired width of the arrow */
  --arrow-width: 20px;

  /*
    * Amount of room to allow for the shadow.
    */
  --shadow-radius: 8px;
  --shadow-margin: calc(var(--shadow-radius) / 2);

  /*
    * Crop the arrow region to show half the arrow plus allow room for margins.
    */
  width: calc(var(--arrow-width) + 2 * var(--shadow-margin));
  height: calc(var(--arrow-width) / 2 + var(--shadow-margin));

  z-index: 2147483647;

  &.-left {
    width: calc(var(--arrow-width) / 2 + var(--shadow-margin));
    height: calc(var(--arrow-width) + 2 * var(--shadow-margin));
  }

  &.-right {
    width: calc(var(--arrow-width) / 2 + var(--shadow-margin));
    height: calc(var(--arrow-width) + 2 * var(--shadow-margin));
  }

  &::before {
    position: absolute;
    content: '';

    /* Make sure the border is included in the size. */
    box-sizing: border-box;

    /* Don't inherit any rounded corners. */
    border-radius: 0;

    /*
    * When the box is rotated, it should have width <arrow-width>. That makes the
    * length of one side of the box equal to:
    *
    *    (<arrow-width> / 2) / sin 45
    */
    --sin-45: 0.707106781;
    --square-side: calc(var(--arrow-width) / 2 / var(--sin-45));
    width: var(--square-side);
    height: var(--square-side);

    /*
    * The rotated square will overshoot the left / top side and need to be
    * shifted in by:
    *
    *   (<arrow-width> - <square side>) / 2
    *
    * But we also want to shift it in so that the box-shadow is not clipped when
    * we clip the parent so we add a suitable margin for that.
    */
    --overhang: calc((var(--arrow-width) - var(--square-side)) / 2);
    margin-left: calc(var(--overhang) + var(--shadow-margin));
    margin-top: calc(var(--overhang) + var(--shadow-margin));

    background: var(--bg-color);
    border: 1px solid var(--border-color);
  }

  &.-bottom {
    margin-top: -1px;
  }

  &.-bottom::before {
    transform: rotate(45deg);
    margin-top: calc(var(--square-side) / -2);
    box-shadow:
      0px 0.5px 0.5px rgba(100, 100, 100, 0.15),
      2px 2px 1px rgba(100, 100, 100, 0.15),
      4px 4px 8px rgba(100, 100, 100, 0.15);
  }

  &.-top {
    margin-top: 1px;
  }

  &.-top::before {
    transform: rotate(225deg);
    box-shadow:
      0px 0.5px 0.5px rgba(100, 100, 100, 0.15),
      -1px 2px 1px rgba(100, 100, 100, 0.15);
  }

  &.-right {
    margin-left: -1px;
  }

  &.-right::before {
    transform: rotate(225deg);
    margin-left: calc(var(--square-side) / -2);
    box-shadow:
      0px 0.5px 0.5px rgba(100, 100, 100, 0.15),
      -2px 2px 1px rgba(100, 100, 100, 0.15),
      -2px 2px 8px rgba(100, 100, 100, 0.15);
  }

  &.-left {
    margin-left: 1px;
  }

  &.-left::before {
    transform: rotate(45deg);
  }
}

@utility -left {
  &.arrow {
    width: calc(var(--arrow-width) / 2 + var(--shadow-margin));
    height: calc(var(--arrow-width) + 2 * var(--shadow-margin));
  }

  &.arrow {
    margin-left: 1px;
  }

  &.arrow::before {
    transform: rotate(45deg);
  }
}

@utility -right {
  & .arrow {
    width: calc(var(--arrow-width) / 2 + var(--shadow-margin));
    height: calc(var(--arrow-width) + 2 * var(--shadow-margin));
  }

  &.arrow {
    margin-left: -1px;
  }

  &.arrow::before {
    transform: rotate(225deg);
    margin-left: calc(var(--square-side) / -2);
    box-shadow:
      0px 0.5px 0.5px rgba(100, 100, 100, 0.15),
      -2px 2px 1px rgba(100, 100, 100, 0.15),
      -2px 2px 8px rgba(100, 100, 100, 0.15);
  }
}

@utility -bottom {
  &.arrow {
    margin-top: -1px;
  }

  &.arrow::before {
    transform: rotate(45deg);
    margin-top: calc(var(--square-side) / -2);
    box-shadow:
      0px 0.5px 0.5px rgba(100, 100, 100, 0.15),
      2px 2px 1px rgba(100, 100, 100, 0.15),
      4px 4px 8px rgba(100, 100, 100, 0.15);
  }
}

@utility -top {
  &.arrow {
    margin-top: 1px;
  }

  &.arrow::before {
    transform: rotate(225deg);
    box-shadow:
      0px 0.5px 0.5px rgba(100, 100, 100, 0.15),
      -1px 2px 1px rgba(100, 100, 100, 0.15);
  }
}

@layer components {
  :host {
    /*
     * The following is because there appears to be some (yet unidentified)
     * add-on that sets `position: absolute` on various div elements. As a
     * result, our popup will end up being positioned at the very end of the
     * page unless we ensure we set left/top ourselves.
     *
     * See: https://github.com/birchill/10ten-ja-reader/issues/947
     */
    position: revert !important;

    /*
     * However, supposing our rule above loses out to the interfering add-on?
     *
     * Assuming said add-on sets `position: absolute` on the popup we can make it
     * work for us by setting the left/top/bottom/right properties.
     */
    position: absolute !important;
    left: 0 !important;
    top: 0 !important;
    right: 0 !important;
    bottom: 0 !important;
    pointer-events: none !important;

    /*
     * It's conceivable add-ons might interfere with our z-index too so make
     * sure that's covered.
     */
    z-index: 2147483647 !important;
  }

  :root,
  :host {
    --normal-font-size: 14px;
    --large-font-size: 17px;
    --xl-font-size: 19px;

    --base-font-size: var(--normal-font-size);
  }

  @keyframes tenten-ja-flash {
    from {
      background: white;
      color: white;
    }
  }

  @keyframes fade-out {
    to {
      opacity: 0;
    }
  }

  @keyframes fade-in {
    to {
      opacity: 1;
    }
  }

  @keyframes roll-up {
    to {
      max-height: 0;
    }
  }

  @keyframes spin-ccw {
    to {
      transform: rotate(-360deg);
    }
  }
}
