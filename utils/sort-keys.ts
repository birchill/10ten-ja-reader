import fg from 'fast-glob';
import * as fs from 'fs';
import * as path from 'path';

// This is a very, very bare-bones utility to sort the keys in a locale
// file.
//
// We do this simply because Phrase does and we want to diffs generated by
// Phrase pull requests to show the actual changes.
//
// It works in one of two modes:
//
// a) Taking a list of paths (relative or absolute).
//
//    This is the primary mode as used by our lint-staged setup.
//
//    It doesn't support globs (yet) simply because lint-staged always provides
//    absolute paths to individual files.
//
//    It does support relative paths simply because that's useful for testing.
//
// b) Taking no arguments.
//
//    In this case it finds all the locale files and processes them.

async function main() {
  // If no files are specified on the command line, get the list of locales.
  let files = process.argv.slice(2);
  if (!files.length) {
    files = getLocaleFiles();
  } else {
    files = files.map((file) => path.resolve(file));
  }

  if (!files) {
    console.log('No files to process found.');
    return;
  }

  for (const file of files) {
    console.log(`Processing ${file}...`);
    if (!file.endsWith('json')) {
      console.warn("File name does not end with 'json'... skipping.");
      continue;
    }

    const contents = JSON.parse(fs.readFileSync(file, 'utf-8'));
    if (!contents || typeof contents !== 'object') {
      throw new Error(
        'File does not appear to consist of an object at the root'
      );
    }

    // Sort keys at root level
    const ordered: { [key: string]: any } = {};
    for (const key of Object.keys(contents).sort()) {
      ordered[key] = contents[key];
    }

    // Write to file
    fs.writeFileSync(file, JSON.stringify(ordered, null, 2));
  }
}

function getLocaleFiles(): Array<string> {
  const localeDir = path.join(__dirname, '..', '_locales');
  return fg.sync('**/messages.json', { cwd: localeDir, absolute: true });
}

main()
  .then(() => {
    console.log('Done.');
  })
  .catch((e) => {
    console.error('Unhandled error');
    console.error(e);
    process.exit(1);
  });
